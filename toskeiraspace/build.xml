<?xml version="1.0"?>
<project name="toskeiraspace" default="war" xmlns:ivy="antlib:org.apache.ivy.ant">
  <!-- Project-specific configuration -->
  <loadproperties srcfile="project.properties"/>
  <property name="base.name" value="${artifactId}-${version}"/>
  <!-- Standard Directory Layout -->
  <property name="src.dir" value="src"/>
  <property name="test.dir" value="test"/>
  <property name="build.dir" value="build"/>
  <property name="dist.dir" value="dist"/>
  <!-- Targets -->
  <target name="resolve" description="Retrieve dependencies with Ivy.">
    <ivy:resolve log="download-only"/>
    <ivy:cachepath conf="build" pathid="build.classpath"/>
    <ivy:cachepath conf="default" pathid="runtime.classpath"/>
    <ivy:cachefileset conf="default" setid="runtime.fileset"/>
    <ivy:cachepath conf="test" pathid="test.classpath"/>
    <ivy:cachepath conf="analysis" pathid="analysis.classpath"/>
  </target>

  <target name="compile" depends="resolve" description="Compile all sources.">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${build.dir}/classes"/>
    <javac srcdir="${src.dir}" destdir="${build.dir}/classes"
           optimize="on" debug="on" deprecation="on" includeantruntime="no">
      <compilerarg value="-Xlint"/>
      <classpath refid="build.classpath"/>
    </javac>
    <copy todir="${build.dir}/classes">
      <fileset dir="${src.dir}" excludes="**/*.java"/>
    </copy>
  </target>

  <target name="war" depends="compile" description="Generate the jarfile distributable.">
    <jar destfile="${dist.dir}/${base.name}.war" basedir="${build.dir}/classes">
      <manifest>
        <attribute name="Created-By" value="GNU Emacs Java Extension"/>
      </manifest>
    </jar>
    <jar destfile="${dist.dir}/${base.name}-all.war" basedir="${build.dir}/classes">
      <zipgroupfileset refid="runtime.fileset"/>
      <manifest>
        <attribute name="Created-By" value="GNU Emacs Java Extension"/>
      </manifest>
    </jar>
  </target>

  <target name="run" depends="compile" description="Run the application.">
    <java classname="${main.class}" classpath="${build.dir}/classes" fork="yes">
      <classpath refid="runtime.classpath"/>
      <arg value="--name"/>
      <arg value="Java"/>
    </java>
  </target>

  <target name="clean" description="Delete all generated files.">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete file="cache.properties"/>
  </target>

  <target name="javadoc" depends="resolve,compile" description="Generate documentation.">
   <javadoc destdir="${dist.dir}/javadoc"
             link="http://download.oracle.com/javase/6/docs/api/"
             sourcepath="${build.dir}/src"
             Doctitle="${ant.project.name} ${version}"
             Windowtitle="${ant.project.name} ${version}">
      <classpath refid="build.classpath"/>
    </javadoc>
  </target>

  <target name="format" description="Run the indenter on all source files.">
    <apply executable="astyle">
      <arg value="--mode=java"/>
      <arg value="--suffix=none"/>
      <fileset dir="${src.dir}" includes="**/*.java"/>
      <fileset dir="${test.dir}" includes="**/*.java"/>
    </apply>
  </target>

  <target name="tags" description="Generate a TAGS file for your editor.">
    <delete file="TAGS"/>
    <apply executable="etags">
      <arg value="-a"/>
      <fileset dir="${src.dir}" includes="**/*.java"/>
      <fileset dir="${test.dir}" includes="**/*.java"/>
    </apply>
  </target>

  <target name="check" depends="resolve" description="Run Checkstyle.">
    <taskdef resource="checkstyletask.properties"
             classpathref="analysis.classpath"/>
    <checkstyle config="checkstyle.xml">
      <fileset dir="${src.dir}" includes="**/*.java"/>
      <classpath path="${build.dir}/classes"/>
    </checkstyle>
  </target>

  <target name="findbugs" depends="compile" description="Run FindBugs.">
    <taskdef classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
             name="findbugs" classpathref="analysis.classpath"/>
    <findbugs output="emacs" classpathref="analysis.classpath" pluginList="">
      <auxclasspath refid="analysis.classpath"/>
      <sourcepath path="${src.dir}"/>
      <class location="${build.dir}/classes"/>
    </findbugs>
  </target>

  <target name="pmd" depends="resolve" description="Run PMD on the code.">
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="analysis.classpath"/>
    <pmd>
      <ruleset>pmd.xml</ruleset>
      <formatter type="emacs" toConsole="true"/>
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
      </fileset>
    </pmd>
  </target>

  <target name="analyze" depends="check,pmd,findbugs" description="Run all static analysis tools."/>

  <!-- Unit testing (JUnit) -->
  <target name="test-compile" depends="compile">
    <mkdir dir="${build.dir}/test"/>
    <javac srcdir="${test.dir}" destdir="${build.dir}/test" optimize="on" debug="on" deprecation="on"
           classpath="${build.dir}/classes" includeantruntime="no">
      <compilerarg value="-Xlint"/>
      <classpath refid="build.classpath"/>
      <classpath refid="test.classpath"/>
    </javac>
    <copy todir="${build.dir}/test">
      <fileset dir="${test.dir}" excludes="**/*.java"/>
    </copy>
    <!-- Test coverage -->
    <taskdef classpathref="test.classpath" resource="tasks.properties"/>
    <cobertura-instrument todir="${build.dir}/instrumented"
                          datafile="${build.dir}/cobertura.ser">
      <fileset dir="${build.dir}/classes">
        <include name="**/*.class"/>
      </fileset>
    </cobertura-instrument>
  </target>

  <target name="test" depends="test-compile" description="Run the unit tests.">
    <junit fork="yes">
      <classpath>
        <pathelement path="${build.dir}/instrumented"/>
        <pathelement path="${build.dir}/classes"/>
        <pathelement path="${build.dir}/test"/>
        <path refid="test.classpath"/>
      </classpath>
      <sysproperty key="net.sourceforge.cobertura.datafile"
                   file="${build.dir}/cobertura.ser"/>
      <batchtest>
        <formatter type="brief" usefile="false"/>
        <fileset dir="${build.dir}/test"/>
      </batchtest>
    </junit>
    <cobertura-report srcdir="${src.dir}" destdir="${dist.dir}/test"
                      datafile="${build.dir}/cobertura.ser"/>
  </target>

</project>
